{"version":3,"sources":["Components/SortingVisualizer/sortingVisualizer.tsx","Utils/sleep.tsx","Components/SortingVisualizer/Sorters/bubble.tsx","Utils/random.tsx","App.tsx","reportWebVitals.ts","index.tsx","Components/SortingVisualizer/sortingVisualizer.module.scss","App.module.scss"],"names":["previousSorter","previousId","sleep","ms","Promise","_","setTimeout","bubbleSort","stepSort","state","a","arr","i","j","id","tmp","newI","newJ","resolve","columnColor","columnIndex","colors","array","current","next","Completed","Max","Current","Unsorted","name","randomIntArray","length","min","max","Array","from","Math","floor","random","sortingColors","initialState","SortingVisualizer","props","useState","setState","useEffect","undefined","sorter","newState","asyncStepSort","columnWidth","columns","map","x","columnHeight","bgColor","columnStyle","width","height","backgroundColor","className","styles","column","style","sortingVisualizerContainer","sortingName","sortingVisualizer","App","selectedSorter","setSelectedSorter","sortersButtons","index","onClick","AppHeader","AppBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.eec44279.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { randomIntArray } from '../../Utils/random';\r\nimport styles from './sortingVisualizer.module.scss';\r\nimport {\r\n  SortingVisualizerProps,\r\n  SortingColors,\r\n  SortingVisualizerState,\r\n} from './types';\r\n\r\nconst sortingColors: SortingColors = {\r\n  Current: 'dodgerblue',\r\n  Max: 'navy',\r\n  Completed: 'aquamarine',\r\n  Unsorted: 'lightskyblue',\r\n};\r\n\r\nlet previousSorter: string;\r\nlet previousId: number;\r\n\r\nconst initialState: () => SortingVisualizerState = () => {\r\n  const ARR_LENGTH = 50;\r\n  const id = Math.random();\r\n  previousId = id;\r\n  return {\r\n    arr: randomIntArray(ARR_LENGTH),\r\n    i: ARR_LENGTH,\r\n    j: 0,\r\n    id,\r\n  };\r\n};\r\n\r\nconst SortingVisualizer = (props: SortingVisualizerProps) => {\r\n  const [state, setState] = useState(() => {\r\n    return initialState();\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (previousSorter !== undefined) {\r\n      setState(initialState());\r\n    }\r\n    previousSorter = props.sorter.name;\r\n  }, [props.sorter]);\r\n\r\n  useEffect(() => {\r\n    const asyncStepSort = async () => {\r\n      const newState = await props.sorter.stepSort(state);\r\n      if (newState.id === previousId) {\r\n        setState(newState);\r\n      }\r\n    };\r\n    asyncStepSort();\r\n  }, [state, props.sorter]);\r\n\r\n  const columnWidth = `calc(${100 / state.arr.length}% - 2px)`;\r\n  const columns = state.arr.map((x, columnIndex) => {\r\n    const columnHeight = `calc(${x}% - 2px)`;\r\n    const bgColor = props.sorter.columnColor(state, columnIndex, sortingColors);\r\n    const columnStyle = {\r\n      width: columnWidth,\r\n      height: columnHeight,\r\n      backgroundColor: bgColor,\r\n    };\r\n    return (\r\n      <div key={columnIndex} className={styles.column} style={columnStyle} />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={styles.sortingVisualizerContainer}>\r\n      <div className={styles.sortingName}>\r\n        <p>{props.sorter.name}</p>\r\n      </div>\r\n      <div className={styles.sortingVisualizer}>{columns}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n","const sleep = (ms: number = 20) => {\r\n  return new Promise((_) => setTimeout(_, ms));\r\n};\r\n\r\nexport default sleep;\r\n","import Sorter, { ColumnColorGetter, StepSort } from './types';\r\nimport { SortingColors, SortingVisualizerState } from '../types';\r\nimport sleep from '../../../Utils/sleep';\r\n\r\nconst columnColor: ColumnColorGetter = (\r\n  state: SortingVisualizerState,\r\n  columnIndex: number,\r\n  colors: SortingColors\r\n) => {\r\n  const [array, limit, current, next] = [\r\n    state.arr,\r\n    state.i,\r\n    state.j,\r\n    state.j + 1,\r\n  ];\r\n  if (columnIndex >= limit) {\r\n    return colors.Completed;\r\n  }\r\n  if (\r\n    (columnIndex === current && array[current] > array[next]) ||\r\n    (columnIndex === next && array[next] > array[current])\r\n  ) {\r\n    return colors.Max;\r\n  }\r\n  if (columnIndex === current || columnIndex === next) {\r\n    return colors.Current;\r\n  }\r\n  return colors.Unsorted;\r\n};\r\n\r\nconst stepSort: StepSort = async (state: SortingVisualizerState) => {\r\n  const { arr, i, j, id } = state;\r\n  if (i < 1) {\r\n    return new Promise<SortingVisualizerState>((_) => ({ arr, i, j, id }));\r\n  }\r\n  if (arr[j] > arr[j + 1]) {\r\n    const tmp = arr[j];\r\n    arr[j] = arr[j + 1];\r\n    arr[j + 1] = tmp;\r\n  }\r\n\r\n  let newI = i;\r\n  let newJ = j;\r\n  if (j + 1 >= i - 1) {\r\n    newJ = 0;\r\n    newI--;\r\n  } else {\r\n    newJ++;\r\n  }\r\n\r\n  await sleep();\r\n  return Promise.resolve<SortingVisualizerState>({\r\n    arr,\r\n    i: newI,\r\n    j: newJ,\r\n    id,\r\n  });\r\n};\r\n\r\nconst name = \"Bubble Sort\";\r\n\r\nconst bubbleSort: Sorter = { stepSort, columnColor, name};\r\n\r\nexport default bubbleSort;\r\n","const randomIntArray = (length: number = 20) => {\r\n  const min = 5;\r\n  const max = 100;\r\n  return Array.from({ length: length }, () => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  });\r\n};\r\n\r\nexport { randomIntArray };\r\n","import React, { useState } from 'react';\nimport style from './App.module.scss';\n\nimport bubbleSort from './Components/SortingVisualizer/Sorters/bubble';\nimport Sorter from './Components/SortingVisualizer/Sorters/types';\nimport SortingVisualizer from './Components/SortingVisualizer/sortingVisualizer';\n\nfunction App() {\n  const [selectedSorter, setSelectedSorter] = useState(bubbleSort);\n  const sorters: Sorter[] = [bubbleSort];\n\n  const sortersButtons = sorters.map((sorter, index) => (\n    <button key={index} onClick={() => setSelectedSorter({ ...sorter })}>\n      {sorter.name}\n    </button>\n  ));\n\n  return (\n    <div className={style.App}>\n      <header className={style.AppHeader}>\n        <p>Sorting Algorithms.</p>\n        {sortersButtons}\n      </header>\n      <div className={style.AppBody}>\n        <SortingVisualizer sorter={selectedSorter} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sortingVisualizerContainer\":\"sortingVisualizer_sortingVisualizerContainer__3icoS\",\"sortingName\":\"sortingVisualizer_sortingName__1i7cd\",\"sortingVisualizer\":\"sortingVisualizer_sortingVisualizer__tgJGU\",\"column\":\"sortingVisualizer_column__3LEfQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1dw3H\",\"AppHeader\":\"App_AppHeader__ecH9s\",\"AppBody\":\"App_AppBody__1Aipn\"};"],"sourceRoot":""}