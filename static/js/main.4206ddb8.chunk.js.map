{"version":3,"sources":["Components/SortingVisualizer/Sorters/counting.tsx","Components/SortingVisualizer/sortingVisualizer.tsx","Components/SortingVisualizer/Sorters/all.tsx","Components/SortingVisualizer/Sorters/bubble.tsx","Utils/random.tsx","Utils/sleep.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.scss","Components/SortingVisualizer/sortingVisualizer.module.scss"],"names":["max","count","sorted","prevId","reset","value","found","array","finished","previousSorter","previousId","sorters","name","columnColor","state","columnIndex","colors","current","Completed","Unsorted","Current","Max","stepSort","limit","id","next","newCurrent","i","length","Array","from","console","log","tmp","newLimit","randomIntArray","min","Math","floor","random","sleep","ms","Promise","_","setTimeout","sortingColors","initialState","SortingVisualizer","props","useState","init","setState","useEffect","undefined","sorter","a","newState","sleepSort","columnWidth","columns","map","x","columnHeight","bgColor","columnStyle","width","height","backgroundColor","className","styles","column","style","sortingVisualizerContainer","sortingName","sortingVisualizer","App","selectedSorter","setSelectedSorter","sortersButtons","index","onClick","AppHeader","sorterButtons","AppBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uIAGIA,EACAC,EACAC,EACAC,E,sEAEEC,EAAQ,WACZJ,EAAM,CAAEK,MAAO,EAAGC,OAAO,GACzBL,EAAQ,CAAEM,MAAO,GAAIC,UAAU,IAOjCJ,IAEO,ICFHK,EACAC,ECDWC,EAbW,CACxB,CACEC,KAAM,gBACNC,YFY0C,SAC5CC,EACAC,EACAC,GAEA,IAAQT,EAAmBO,EAAnBP,MAAOU,EAAYH,EAAZG,QACTZ,EAAQE,EAAMQ,GAEpB,OAAKf,EAAIM,MAQJL,EAAMO,SAIJO,GAAeE,EAAUD,EAAOE,UAAYF,EAAOG,SAHjDJ,IAAgBE,EAAUD,EAAOI,QAAUJ,EAAOG,SARlDJ,IAAgBE,EACnBZ,GAASL,EAAIK,MACXW,EAAOK,IACPL,EAAOI,QACTJ,EAAOG,UExBXG,SFkC8B,SAACR,GACjC,IAAQP,EAA8BO,EAA9BP,MAAOgB,EAAuBT,EAAvBS,MAAON,EAAgBH,EAAhBG,QAASO,EAAOV,EAAPU,GACzBC,EAAOR,EAAU,EAMvB,GApCOd,IAgCSqB,IACdrB,EAASqB,EACTpB,KAEEU,EAAMN,SACR,MAAO,CAAED,QAAOgB,QAAON,UAASO,KAAIhB,UAAU,GACzC,GAAKR,EAAIM,MAaT,IAAKL,EAAMO,SAgBX,CACLD,EAAMU,GAAWf,EAAOe,GAExB,IAAMT,EAAWR,EAAIM,OAASL,EAAMO,UAAYS,IAAYM,EAAQ,EAEpE,MAAO,CAAEhB,QAAOgB,QAAON,QAAST,EAAWS,EAAUQ,EAAMD,KAAIhB,YApB/D,IAAMH,EAAQE,EAAMU,GACpBhB,EAAMM,MAAMF,IAAU,EACtB,IAAIqB,EAAaD,EACjB,GAAIR,IAAYM,EAAQ,EAAG,CACzBtB,EAAMO,UAAW,EACjBkB,EAAa,EACb,IAAK,IAAIC,EAAI,EAAGA,EAAI1B,EAAMM,MAAMqB,OAAQD,IACtC1B,EAAMM,MAAMoB,IAAM1B,EAAMM,MAAMoB,EAAI,GAEpC,IAAK,IAAIA,EAAIpB,EAAMqB,OAAS,EAAGD,GAAK,EAAGA,IACrCzB,EAAOD,EAAMM,MAAMA,EAAMoB,IAAM,GAAKpB,EAAMoB,GAC1C1B,EAAMM,MAAMA,EAAMoB,KAAO,EAG7B,MAAO,CAAEpB,QAAOgB,QAAON,QAASS,EAAYF,KAAIhB,UAAU,GA3B1DR,EAAIK,MAAQL,EAAIK,MAAQE,EAAMU,GAAWjB,EAAIK,MAAQE,EAAMU,GAC3D,IAAIS,EAAaD,EAUjB,OATIR,IAAYM,EAAQ,IACtBvB,EAAIM,OAAQ,EACZL,EAAQ,CACNM,MAAOsB,MAAMC,KAAK,CAAEF,OAAQ5B,EAAIK,MAAQ,IAAK,kBAAM,KACnDG,UAAU,GAEZN,EAAS2B,MAAMC,KAAK,CAAEF,OAAQrB,EAAMqB,SAAU,kBAAM,KACpDF,EAAa,GAER,CAAEnB,QAAOgB,QAAON,QAASS,EAAYF,KAAIhB,UAAU,KEtD5D,CACEI,KAAM,cACNC,YCT0C,SAC5CC,EACAC,EACAC,GAEA,IAAQT,EAA0BO,EAA1BP,MAAOgB,EAAmBT,EAAnBS,MAAON,EAAYH,EAAZG,QAChBQ,EAAOR,EAAU,EACvB,OAAIF,GAAeQ,EACVP,EAAOE,UAGbH,IAAgBE,GAAWV,EAAMU,GAAWV,EAAMkB,IAClDV,IAAgBU,GAAQlB,EAAMkB,GAAQlB,EAAMU,GAEtCD,EAAOK,IAEZN,IAAgBE,GAAWF,IAAgBU,EACtCT,EAAOI,QAETJ,EAAOG,UDTZG,SCY8B,SAACR,GACjCiB,QAAQC,IAAI,WACZ,IAAQzB,EAA8BO,EAA9BP,MAAOgB,EAAuBT,EAAvBS,MAAON,EAAgBH,EAAhBG,QAASO,EAAOV,EAAPU,GACzBC,EAAOR,EAAU,EAEvB,GAAIM,EAAQ,EACV,MAAO,CAAEhB,QAAOgB,QAAON,UAASO,KAAIhB,UAAU,GAEhD,GAAID,EAAMU,GAAWV,EAAMkB,GAAO,CAChC,IAAMQ,EAAM1B,EAAMU,GAClBV,EAAMU,GAAWV,EAAMkB,GACvBlB,EAAMkB,GAAQQ,EAGhB,IAAIC,EAAWX,EACXG,EAAaT,EAQjB,OAPIQ,GAAQF,EAAQ,GAClBG,EAAa,EACbQ,KAEAR,IAGK,CAAEnB,QAAOgB,MAAOW,EAAUjB,QAASS,EAAYF,KAAIhB,UAAU,M,uBChDhE2B,EAAiB,WAA0B,IAAzBP,EAAwB,uDAAP,GACjCQ,EAAM,EACNpC,EAAM,IACZ,OAAO6B,MAAMC,KAAK,CAAEF,OAAQA,IAAU,WACpC,OAAOS,KAAKC,MAAMD,KAAKE,UAAYvC,EAAMoC,EAAM,GAAKA,OCAzCI,EAJD,WAAsB,IAArBC,EAAoB,uDAAP,GAC1B,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAOC,WAAWD,EAAGF,O,uBJSpCI,EAA+B,CACnCzB,QAAS,aACTC,IAAK,WACLH,UAAW,aACXC,SAAU,gBAMN2B,EAA6C,WACjD,IACMtB,EAAKa,KAAKE,SAQhB,MAPc,CACZhC,MAAO4B,EAHU,IAIjBZ,MAJiB,GAKjBN,QAAS,EACTO,KACAhB,UAAU,IA4DCuC,EAvDW,SAACC,GACzB,MAA0BC,oBAAS,WACjC,IAAMC,EAAOJ,IAEb,OADApC,EAAawC,EAAK1B,GACX0B,KAHT,mBAAOpC,EAAP,KAAcqC,EAAd,KAMAC,qBAAU,WACR,QAAuBC,IAAnB5C,EAA8B,CAChC,IAAMyC,EAAOJ,IACbpC,EAAawC,EAAK1B,GAClB2B,EAASD,GAEXzC,EAAiBuC,EAAMM,OAAO1C,OAC7B,CAACoC,EAAMM,SAEVF,qBAAU,WACHtC,EAAMN,UACM,uCAAG,4BAAA+C,EAAA,0DACVC,EAAWR,EAAMM,OAAOhC,SAASR,IAC1BU,KAAOd,EAFJ,gCAGR8B,IAHQ,OAIdW,EAASK,GAJK,2CAAH,oDAOfC,KAED,CAAC3C,EAAOkC,EAAMM,SAEjB,IAAMI,EAAW,eAAW,IAAM5C,EAAMP,MAAMqB,OAA7B,YACX+B,EAAU7C,EAAMP,MAAMqD,KAAI,SAACC,EAAG9C,GAClC,IAAM+C,EAAY,eAAWD,EAAX,YACZE,EAAUf,EAAMM,OAAOzC,YAAYC,EAAOC,EAAa8B,GACvDmB,EAAc,CAClBC,MAAOP,EACPQ,OAAQJ,EACRK,gBAAiBJ,GAEnB,OACE,qBAAuBK,UAAWC,IAAOC,OAAQC,MAAOP,EAAxD,SACE,+BAAOH,KADC9C,MAMd,OACE,sBAAKqD,UAAWC,IAAOG,2BAAvB,UACE,qBAAKJ,UAAWC,IAAOI,YAAvB,SACE,4BAAIzB,EAAMM,OAAO1C,SAEnB,qBAAKwD,UAAWC,IAAOK,kBAAvB,SAA2Cf,QKvDlCgB,MAtBf,WACE,MAA4C1B,mBAAStC,EAAQ,IAA7D,mBAAOiE,EAAP,KAAuBC,EAAvB,KAEMC,EAAiBnE,EAAQiD,KAAI,SAACN,EAAQyB,GAAT,OACjC,wBAAoBC,QAAS,kBAAMH,EAAkB,eAAKvB,KAA1D,SACGA,EAAO1C,MADGmE,MAKf,OACE,sBAAKX,UAAWG,IAAMI,IAAtB,UACE,yBAAQP,UAAWG,IAAMU,UAAzB,UACE,sDACA,qBAAKb,UAAWG,IAAMW,cAAtB,SAAsCJ,OAExC,qBAAKV,UAAWG,IAAMY,QAAtB,SACE,cAAC,EAAD,CAAmB7B,OAAQsB,UCRpBQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,uBAAuB,cAAgB,2BAA2B,QAAU,uB,kBCAjID,EAAOC,QAAU,CAAC,2BAA6B,sDAAsD,YAAc,uCAAuC,kBAAoB,6CAA6C,OAAS,qC","file":"static/js/main.4206ddb8.chunk.js","sourcesContent":["import { ColumnColorGetter, StepSort } from './types';\r\nimport { SortingColors, SortingVisualizerState } from '../types';\r\n\r\nlet max: { value: number; found: boolean };\r\nlet count: { array: number[]; finished: boolean };\r\nlet sorted: number[];\r\nlet prevId: number;\r\n\r\nconst reset = () => {\r\n  max = { value: 0, found: false };\r\n  count = { array: [], finished: false };\r\n};\r\n\r\nconst isNewSorter = (sorterId: number) => {\r\n  return prevId !== sorterId;\r\n};\r\n\r\nreset();\r\n\r\nexport const columnColor: ColumnColorGetter = (\r\n  state: SortingVisualizerState,\r\n  columnIndex: number,\r\n  colors: SortingColors\r\n) => {\r\n  const { array, current } = state;\r\n  const value = array[columnIndex];\r\n\r\n  if (!max.found) {\r\n    return columnIndex === current\r\n      ? value >= max.value\r\n        ? colors.Max\r\n        : colors.Current\r\n      : colors.Unsorted;\r\n  }\r\n\r\n  if (!count.finished) {\r\n    return columnIndex === current ? colors.Current : colors.Unsorted;\r\n  }\r\n\r\n  return columnIndex <= current ? colors.Completed : colors.Unsorted;\r\n};\r\n\r\nexport const stepSort: StepSort = (state: SortingVisualizerState) => {\r\n  const { array, limit, current, id } = state;\r\n  const next = current + 1;\r\n\r\n  if (isNewSorter(id)) {\r\n    prevId = id;\r\n    reset();\r\n  }\r\n  if (state.finished) {\r\n    return { array, limit, current, id, finished: true };\r\n  } else if (!max.found) {\r\n    max.value = max.value > array[current] ? max.value : array[current];\r\n    let newCurrent = next;\r\n    if (current === limit - 1) {\r\n      max.found = true;\r\n      count = {\r\n        array: Array.from({ length: max.value + 1 }, () => 0),\r\n        finished: false,\r\n      };\r\n      sorted = Array.from({ length: array.length }, () => 0);\r\n      newCurrent = 0;\r\n    }\r\n    return { array, limit, current: newCurrent, id, finished: false };\r\n  } else if (!count.finished) {\r\n    const value = array[current];\r\n    count.array[value] += 1;\r\n    let newCurrent = next;\r\n    if (current === limit - 1) {\r\n      count.finished = true;\r\n      newCurrent = 0;\r\n      for (let i = 1; i < count.array.length; i++) {\r\n        count.array[i] += count.array[i - 1];\r\n      }\r\n      for (let i = array.length - 1; i >= 0; i--) {\r\n        sorted[count.array[array[i]] - 1] = array[i];\r\n        count.array[array[i]] -= 1;\r\n      }\r\n    }\r\n    return { array, limit, current: newCurrent, id, finished: false };\r\n  } else {\r\n    array[current] = sorted[current];\r\n\r\n    const finished = max.found && count.finished && current === limit - 1;\r\n\r\n    return { array, limit, current: finished ? current : next, id, finished };\r\n  }\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { randomIntArray } from '../../Utils/random';\r\nimport sleep from '../../Utils/sleep';\r\nimport styles from './sortingVisualizer.module.scss';\r\nimport {\r\n  SortingVisualizerProps,\r\n  SortingColors,\r\n  SortingVisualizerState,\r\n} from './types';\r\n\r\nconst sortingColors: SortingColors = {\r\n  Current: 'dodgerblue',\r\n  Max: 'darkblue',\r\n  Completed: 'aquamarine',\r\n  Unsorted: 'lightskyblue',\r\n};\r\n\r\nlet previousSorter: string;\r\nlet previousId: number;\r\n\r\nconst initialState: () => SortingVisualizerState = () => {\r\n  const ARR_LENGTH = 50;\r\n  const id = Math.random();\r\n  const state = {\r\n    array: randomIntArray(ARR_LENGTH),\r\n    limit: ARR_LENGTH,\r\n    current: 0,\r\n    id,\r\n    finished: false,\r\n  };\r\n  return state;\r\n};\r\n\r\nconst SortingVisualizer = (props: SortingVisualizerProps) => {\r\n  const [state, setState] = useState(() => {\r\n    const init = initialState();\r\n    previousId = init.id;\r\n    return init;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (previousSorter !== undefined) {\r\n      const init = initialState();\r\n      previousId = init.id;\r\n      setState(init);\r\n    }\r\n    previousSorter = props.sorter.name;\r\n  }, [props.sorter]);\r\n\r\n  useEffect(() => {\r\n    if (!state.finished) {\r\n      const sleepSort = async () => {\r\n        const newState = props.sorter.stepSort(state);\r\n        if (newState.id === previousId) {\r\n          await sleep();\r\n          setState(newState);\r\n        }\r\n      };\r\n      sleepSort();\r\n    }\r\n  }, [state, props.sorter]);\r\n\r\n  const columnWidth = `calc(${100 / state.array.length}% - 2px)`;\r\n  const columns = state.array.map((x, columnIndex) => {\r\n    const columnHeight = `calc(${x}% - 2px)`;\r\n    const bgColor = props.sorter.columnColor(state, columnIndex, sortingColors);\r\n    const columnStyle = {\r\n      width: columnWidth,\r\n      height: columnHeight,\r\n      backgroundColor: bgColor,\r\n    };\r\n    return (\r\n      <div key={columnIndex} className={styles.column} style={columnStyle}>\r\n        <span>{x}</span>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={styles.sortingVisualizerContainer}>\r\n      <div className={styles.sortingName}>\r\n        <p>{props.sorter.name}</p>\r\n      </div>\r\n      <div className={styles.sortingVisualizer}>{columns}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n","import Sorter from './types';\r\nimport * as bubble from './bubble';\r\nimport * as counting from './counting';\r\n\r\nconst sorters: Sorter[] = [\r\n  {\r\n    name: 'Counting Sort',\r\n    columnColor: counting.columnColor,\r\n    stepSort: counting.stepSort,\r\n  },\r\n  {\r\n    name: 'Bubble Sort',\r\n    columnColor: bubble.columnColor,\r\n    stepSort: bubble.stepSort,\r\n  },\r\n];\r\n\r\nexport default sorters;\r\n","import { ColumnColorGetter, StepSort } from './types';\r\nimport { SortingColors, SortingVisualizerState } from '../types';\r\n\r\nexport const columnColor: ColumnColorGetter = (\r\n  state: SortingVisualizerState,\r\n  columnIndex: number,\r\n  colors: SortingColors\r\n) => {\r\n  const { array, limit, current } = state;\r\n  const next = current + 1;\r\n  if (columnIndex >= limit) {\r\n    return colors.Completed;\r\n  }\r\n  if (\r\n    (columnIndex === current && array[current] > array[next]) ||\r\n    (columnIndex === next && array[next] > array[current])\r\n  ) {\r\n    return colors.Max;\r\n  }\r\n  if (columnIndex === current || columnIndex === next) {\r\n    return colors.Current;\r\n  }\r\n  return colors.Unsorted;\r\n};\r\n\r\nexport const stepSort: StepSort = (state: SortingVisualizerState) => {\r\n  console.log('sorting');\r\n  const { array, limit, current, id } = state;\r\n  const next = current + 1;\r\n\r\n  if (limit < 1) {\r\n    return { array, limit, current, id, finished: true };\r\n  }\r\n  if (array[current] > array[next]) {\r\n    const tmp = array[current];\r\n    array[current] = array[next];\r\n    array[next] = tmp;\r\n  }\r\n\r\n  let newLimit = limit;\r\n  let newCurrent = current;\r\n  if (next >= limit - 1) {\r\n    newCurrent = 0;\r\n    newLimit--;\r\n  } else {\r\n    newCurrent++;\r\n  }\r\n\r\n  return { array, limit: newLimit, current: newCurrent, id, finished: false };\r\n};\r\n","const randomIntArray = (length: number = 20) => {\r\n  const min = 5;\r\n  const max = 100;\r\n  return Array.from({ length: length }, () => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  });\r\n};\r\n\r\nexport { randomIntArray };\r\n","const sleep = (ms: number = 20) => {\r\n  return new Promise((_) => setTimeout(_, ms));\r\n};\r\n\r\nexport default sleep;\r\n","import React, { useState } from 'react';\nimport style from './App.module.scss';\n\nimport sorters from './Components/SortingVisualizer/Sorters/all';\nimport SortingVisualizer from './Components/SortingVisualizer/sortingVisualizer';\n\nfunction App() {\n  const [selectedSorter, setSelectedSorter] = useState(sorters[0]);\n\n  const sortersButtons = sorters.map((sorter, index) => (\n    <button key={index} onClick={() => setSelectedSorter({ ...sorter })}>\n      {sorter.name}\n    </button>\n  ));\n\n  return (\n    <div className={style.App}>\n      <header className={style.AppHeader}>\n        <div>Sorting Algorithms.</div>\n        <div className={style.sorterButtons}>{sortersButtons}</div>\n      </header>\n      <div className={style.AppBody}>\n        <SortingVisualizer sorter={selectedSorter} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1dw3H\",\"AppHeader\":\"App_AppHeader__ecH9s\",\"sorterButtons\":\"App_sorterButtons__10aHK\",\"AppBody\":\"App_AppBody__1Aipn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sortingVisualizerContainer\":\"sortingVisualizer_sortingVisualizerContainer__3icoS\",\"sortingName\":\"sortingVisualizer_sortingName__1i7cd\",\"sortingVisualizer\":\"sortingVisualizer_sortingVisualizer__tgJGU\",\"column\":\"sortingVisualizer_column__3LEfQ\"};"],"sourceRoot":""}