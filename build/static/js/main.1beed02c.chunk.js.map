{"version":3,"sources":["Components/Visualizer/Visualizer.module.scss","App.module.scss","Components/Visualizer/Visualizer.tsx","Utils/sleep.tsx","Components/Visualizer/Sorters/bubbleSort.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Colors","randomIntArr","length","min","max","Array","from","v","k","Math","floor","random","Visualizer","props","useState","arr","i","j","state","setState","useEffect","a","sort","newState","asyncSort","columnWidth","columns","map","x","columnIndex","columnHeight","bgColor","columnColor","columnStyle","width","height","backgroundColor","key","className","styles","column","style","visualizer","sleep","ms","Promise","_","setTimeout","bubbleSortColumnColor","cIdx","current","next","Completed","NewMax","Current","Unsorted","bubbleSort","tmp","newI","newJ","debug_mult","resolve","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1beed02c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"visualizer\":\"Visualizer_visualizer__1kXuS\",\"column\":\"Visualizer_column__3YTfZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1otcg\"};","import React, { useState, useEffect } from 'react';\r\nimport styles from './Visualizer.module.scss';\r\n\r\ntype visualizerProps = {\r\n  sort(state: visualizerState): Promise<visualizerState>;\r\n  columnColor(\r\n    state: visualizerState,\r\n    columnIndex: number,\r\n    colors: any\r\n  ): string;\r\n};\r\n\r\nexport type visualizerState = {\r\n  arr: number[];\r\n  i: number;\r\n  j: number;\r\n};\r\n\r\nconst randomIntArr = (length: number = 20) => {\r\n  const min = 5;\r\n  const max = 100;\r\n  return Array.from({ length: length }, (v, k) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  });\r\n};\r\nconst ARR_LENGTH = 50;\r\nenum Colors {\r\n  Current = 'dodgerblue',\r\n  NewMax = 'navy',\r\n  Completed = 'aquamarine',\r\n  Unsorted = 'lightskyblue',\r\n}\r\n\r\nconst Visualizer = (props: visualizerProps) => {\r\n  const [state, setState] = useState(() => {\r\n    const initialState: visualizerState = {\r\n      arr: randomIntArr(ARR_LENGTH),\r\n      i: ARR_LENGTH,\r\n      j: 0,\r\n    };\r\n    return initialState;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const asyncSort = async () => {\r\n      const newState = await props.sort(state);\r\n      if (newState.arr !== state.arr) {\r\n        setState(newState);\r\n      }\r\n    };\r\n    asyncSort();\r\n  }, [state, props]);\r\n\r\n  const columnWidth = `calc(${100 / state.arr.length}% - 2px)`;\r\n  const columns = state.arr.map((x, columnIndex) => {\r\n    const columnHeight = `calc(${x}% - 2px)`;\r\n    const bgColor = props.columnColor(state, columnIndex, Colors);\r\n    const columnStyle = {\r\n      width: columnWidth,\r\n      height: columnHeight,\r\n      backgroundColor: bgColor,\r\n    };\r\n    return (\r\n      <div key={columnIndex} className={styles.column} style={columnStyle} />\r\n    );\r\n  });\r\n\r\n  return <div className={styles.visualizer}>{columns}</div>;\r\n};\r\n\r\nexport default Visualizer;\r\n","const sleep = (ms: number) => {\r\n  return new Promise((_) => setTimeout(_, ms));\r\n};\r\nexport default sleep;\r\n","import { visualizerState } from '../Visualizer';\r\nimport sleep from '../../../Utils/sleep';\r\n\r\nconst debug_mult = 1;\r\n\r\nexport const bubbleSortColumnColor = (\r\n  state: visualizerState,\r\n  cIdx: number,\r\n  Colors: any\r\n) => {\r\n  const [arr, limit, current, next] = [\r\n    state.arr,\r\n    state.i,\r\n    state.j,\r\n    state.j + 1,\r\n  ];\r\n  if (cIdx >= limit) return Colors.Completed;\r\n  if (\r\n    (cIdx === current && arr[current] > arr[next]) ||\r\n    (cIdx === next && arr[next] > arr[current])\r\n  )\r\n    return Colors.NewMax;\r\n  if (cIdx === current || cIdx === next) return Colors.Current;\r\n  return Colors.Unsorted;\r\n};\r\n\r\nconst bubbleSort = async (props: visualizerState) => {\r\n  const [arr, i, j] = [props.arr, props.i, props.j];\r\n  if (props.i < 1)\r\n    return new Promise<visualizerState>((_) => ({\r\n      arr: arr,\r\n      i: i,\r\n      j: j,\r\n    }));\r\n\r\n  if (arr[j] > arr[j + 1]) {\r\n    const tmp = arr[j];\r\n    arr[j] = arr[j + 1];\r\n    arr[j + 1] = tmp;\r\n  }\r\n\r\n  let newI = i;\r\n  let newJ = j;\r\n  if (j + 1 >= i - 1) {\r\n    newJ = 0;\r\n    newI--;\r\n  } else {\r\n    newJ++;\r\n  }\r\n\r\n  await sleep(debug_mult * 100);\r\n  return Promise.resolve<visualizerState>({\r\n    arr: arr.slice(),\r\n    i: newI,\r\n    j: newJ,\r\n  });\r\n};\r\n\r\nexport default bubbleSort;\r\n","import React from 'react';\nimport styles from './App.module.scss';\nimport Visualizer from './Components/Visualizer/Visualizer';\nimport bubbleSort, {\n  bubbleSortColumnColor,\n} from './Components/Visualizer/Sorters/bubbleSort';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <Visualizer sort={bubbleSort} columnColor={bubbleSortColumnColor} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}